<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2
       http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">
    <beans>
        <authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices"
                              xmlns="http://www.springframework.org/schema/security/oauth2">
            <refresh-token/>
            <client-credentials/>
            <password authentication-manager-ref="userAuthenticationManager" disabled="false"/>
        </authorization-server>
        <authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
            <authentication-provider user-service-ref="clientDetailsUserService"/>
        </authentication-manager>
        <authentication-manager id="userAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
            <authentication-provider>
                <password-encoder hash="md5"/>
                <!--<user-service >
                    <user name="username" password="password" authorities="ROLE_USER" />
                </user-service>-->
                <jdbc-user-service data-source-ref="dataSource"
                                   users-by-username-query="SELECT user_name, password, '1' as active_flag
			FROM ws_users WHERE user_name=?"
                                   authorities-by-username-query="SELECT ws_users.user_name, ws_authorities.authority
			as authority FROM ws_users, ws_authorities WHERE ws_users.user_name =?  AND
			ws_users.user_name = ws_authorities.user_name"/>
            </authentication-provider>
        </authentication-manager>
        <http pattern="/oauth/token" use-expressions="false" create-session="stateless"
              authentication-manager-ref="clientAuthenticationManager"
              xmlns="http://www.springframework.org/schema/security">
            <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY"/>
            <csrf disabled="true"/>
            <anonymous enabled="true"/>
            <http-basic entry-point-ref="clientAuthenticationEntryPoint"/>
            <custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER"/>
            <access-denied-handler ref="oauthAccessDeniedHandler"/>
        </http>
        <oauth:resource-server id="resourceServerFilter" resource-id="rest_server" token-services-ref="tokenServices"/>
        <oauth:client-details-service id="clientDetails">
            <oauth:client client-id="the_client" secret="secret123" scope="read,write"
                          authorized-grant-types="password,refresh_token,client_credentials" authorities="ROLE_USER"/>
        </oauth:client-details-service>
        <http pattern="/api/**" use-expressions="false" create-session="never"
              entry-point-ref="oauthAuthenticationEntryPoint" access-decision-manager-ref="accessDecisionManager"
              xmlns="http://www.springframework.org/schema/security">
            <anonymous enabled="false"/>
            <csrf disabled="true"/>
            <intercept-url pattern="/api/perforation" access="ROLE_PERFORATION_GET" method="GET" />
            <intercept-url pattern="/api/perforation" access="ROLE_PERFORATION_UPDATE" method="PUT" />
            <intercept-url pattern="/api/archives" access="ROLE_ARCHIVES_GET" method="GET" />
            <intercept-url pattern="/api/archives" access="ROLE_ARCHIVES_UPDATE" method="PUT" />
            <intercept-url pattern="/api/cutOffAmountInfo" access="ROLE_CUTOFAMOUNT_INFO_GET" method="GET" />
            <intercept-url pattern="/api/afterCutOffAmount" access="ROLE_CUTOFAMOUNT_AFTER_GET" method="GET" />
            <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER"/>
            <access-denied-handler ref="oauthAccessDeniedHandler"/>
        </http>
        <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore"/>
        <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
            <property name="tokenStore" ref="tokenStore"/>
            <property name="supportRefreshToken" value="true"/>
            <property name="clientDetailsService" ref="clientDetails"/>
            <property name="accessTokenValiditySeconds" value="1200"/>
            <property name="refreshTokenValiditySeconds" value="3600"/>
        </bean>
        <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
            <constructor-arg>
                <list>
                    <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter"/>
                    <bean class="org.springframework.security.access.vote.RoleVoter"/>
                    <bean class="org.springframework.security.access.vote.AuthenticatedVoter"/>
                </list>
            </constructor-arg>
        </bean>
        <bean id="oauthAuthenticationEntryPoint"
              class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
            <property name="realmName" value="test"/>
        </bean>
        <bean id="clientAuthenticationEntryPoint"
              class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
            <property name="realmName" value="theRealm/client"/>
            <property name="typeName" value="Basic"/>
        </bean>
        <bean id="clientCredentialsTokenEndpointFilter"
              class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
            <property name="authenticationManager" ref="clientAuthenticationManager"/>
        </bean>
        <bean id="clientDetailsUserService"
              class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
            <constructor-arg ref="clientDetails"/>
        </bean>
        <bean id="oauthAccessDeniedHandler"
              class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler"/>
        <sec:global-method-security pre-post-annotations="enabled" proxy-target-class="true">
            <sec:expression-handler ref="oauthExpressionHandler"/>
        </sec:global-method-security>
        <oauth:expression-handler id="oauthExpressionHandler"/>
        <oauth:web-expression-handler id="oauthWebExpressionHandler"/>
    </beans>
</beans>
